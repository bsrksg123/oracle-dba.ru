<html>

<?php include_once "_header.php"?>


<body>




<br/><br/>

<div class="link">
<?php include_once "_pagenav.php"?>



<br/><br/><br/>
<h2>Утилиты экспорта и импорта данных Data Pump</h2>
<br/><br/>

В состав технологии Data Pump входят утилиты: Data Pump Export (expdp) и Data Pump Import (impdp).<br/><br/>
Data Pump Export – выгружает данные в файлы операционной системы, называемые файлами дампа (dumps files), в специальном формате, который может понимать только утилита Data Pump Import. 

<br/><br/>
Получить справку по утилитам можно выполнив команды:
<br/><br/>
expdp help=y <br/>
impdp help=y 

<br/>

<br/><br/>
Если необходимо выполнить экспорт схемы или ее объектов, воспользуйтесь правами данной схемы. Использовать полномочия учетных записей sys и system не рекомендуется (по той причине, что для импорта могут потребоваться права sys и  system соотвестственно).
<br/><br/> 

Файл параметров экспорта схемы.

<br/><br/> 

<strong>vi exoprt_schema_name.config</strong>
<pre>
----
JOB_NAME=impdp_schema_name
DUMPFILE=dpdumps:schema_name.dmp
LOGFILE=dplogs:expdp_schema_name_YYYYMMDD.log 
---

JOB_NAME - имя задания, чтобы при необходимости задание можно было бы идентифицировать по имени.

DUMPFILE - каталог для дампа
LOGFILE - каталог для логов


dplogs - ссылка в базе данных на каталог в котором должны будут сохраниться логи результата выполнения экспорта схемы базы данных.
dpdumps - ссылка в базе данных на каталог в котором должны будут сохраниться файл дампа базы данных.

</pre>

dplogs и dpdumps должны ссылаться на реальные каталоги операционной системы с достаточным набором прав на запись.

<br/><br/>

# mkdir -p /u03/oradata/datapump/dumps<br/>
# mkdir -p /u03/oradata/datapump/logs<br/>

<br/><br/>

# chown -R oracle11:dba /u03/oradata/datapump/dumps<br/>
# chown -R oracle11:dba /u03/oradata/datapump/logs<br/>


<br/><br/>

Создание ссылки в базе данных на катлоги операционной системы

<br/><br/>

$ sqlplus / as sysdba<br/>
<br/>
<br/>
<strong>Посмотреть уже имеющиеся каталоги для datapump:</strong>

<br/>
<br/>

<pre>
SQL> set linesize 200;
SQL> set pagesize 0;
SQL> col directory_name format a30;
SQL> col directory_path format a60;
SQL> select directory_name, directory_path from dba_directories;
</pre>
 
<br/>
<br/>

 
Мне не нравится каталог по умолчанию. Предпочитаю его удалить<br/>
DROP DIRECTORY DATA_PUMP_DIR;<br/>

<br/><br/>
Создаю директории<br/>
CREATE DIRECTORY  dpdumps  as '/u03/oradata/datapump/dumps';<br/>
CREATE DIRECTORY  dplogs   as '/u03/oradata/datapump/logs';<br/>


Делегирую права на запись в данную директорию пользователю scott<br/>
GRANT READ, WRITE ON DIRECTORY dpdumps TO scott;<br/>
GRANT READ, WRITE ON DIRECTORY dplogs TO scott;<br/>

<br/><br/>
Если необходимо предоставить возможность экспорта данных в указанные каталоги для любых схем:<br/>
GRANT READ, WRITE ON DIRECTORY dpdumps TO PUBLIC;<br/>
GRANT READ, WRITE ON DIRECTORY dplogs TO PUBLIC; 

<br/><br/>
<br/><br/>


<strong>Экспорт схемы с использованием файла параметров:</strong>
<br/><br/>
$ nohup expdp scott/tiger parfile=exoprt_schema_name.config &

<br/><br/>
В некоторых случаях необходимо явно указать SID базы данных.
<br/>
$ nohup expdp scott/tiger@SID parfile=exoprt_schema_name.config &

<br/><br/>

<strong>Экспорт можно выполнить одной командой без использования файла параметров:</strong>
<br/><br/>
$ nohup expdp scott/tiger job_name=scott_export_job_01 dumpfile=dpdumps:scott_YYYYMMDD.dmp logfile=dplogs:scott_YYYYMMDD  &

<br/><br/>
<br/><br/>
<hr>
<br/><br/>
<br/><br/>


<strong>Технология Data Pump состоит из трех главных компонентов:</strong>

<br/><br/>

<ul>
	<li>Пакет DBMS_DATAPUMP – это главный механизм для осуществления загрузки и выгрузки метаданных словаря данных. В пакете DBMS_DATAPUMP  содержится основополагающие элементы технологии Data Pump в виде процедур, которые в действиельности приводят в действие задания по загрузке и выгрузке данных. Содержимое этого пакета отвечает за работу как утилиты Data Pump export, так и утилиты Data Pump Import.</li>
	<li>Пакет DBMS_METADATA – для извлечения и изменения метаданных Oracle.</li>
	<li>Клиенты с интерфейсом командной строки – impdbp и expdp</li>
</ul>

<br/><br/>



<h3>Режимы утилиты Data Pump Export</h3>

<br/><br/>

<strong>Data Pump Export поддерживает несколько режимов для выполнения заданий.</strong>

<br/><br/>


<ul>
	<li>Режим экспорта всей базы данных. Позволяет выполнять экспорт всей базы данных за один сеанс экспорта с помощью параметра FULL. Для использования этого режима, необходимы привилегии EXPORT_FULL_DATABASE.</li>
	<li>Режим схем. Позволяет выполнять экспорт данных и/или объектов только конкретного пользователя с помощью параметра SCHEMAS.</li>
	<li>Режим табличных пространств. Позволяет выполнять экспорт всех таблиц, которые содержатся в одном или нескольких табливчных пространствах, с помощью параметра TABLESPACES или только метаданных тех объектов, которые содержатся в одном или нескольких табличных пространствах, с помощью параметра TRANSPORT_TABLESPACES. Выполнять экспорт табличных пространств между базами данных можно, чначала выполнив экспорт метаданных, затем скопировав файлы табличного пространства на целевой сервер, а потом импортировав метаданные в целевую базу данных.</li>
	<li>Режим таблиц. Позволяет выполнять экспорт только одной или нескольких конкретных таблиц с помощью параметра TABLES. </li>
</ul>

<br/><br/>

По умолчанию для выполнения заданий Data Pump Export и Data Pump Import используется режим схем. 




<br/>
<br/>



<br/><br/>
<strong>Параметры фильтрации экспортируемых данных.</strong>

<br/><br/>
Параметр CONTENT  - позволяет выполнять фильтрацию тех данных, которые должны помещаться в файл дампа при экспорте. Он может принимать следующие значения:


<br/><br/>

<ul>
	<li>ALL – указывает, что требуется экспортировать как данные таблиц, так и определения этих таблиц и других объектов (метаданных);</li>
	<li>DATA_ONLY – указывает, что требуется экспортировать только строки таблиц.</li>
	<li>METADATA_ONLY – указывает, что требуется экспортировать только метаданные.</li>
</ul>


<br/><br/>

Пример:

<br/><br/>

nohup expdp scott/tiger dumpfile=dpdumps:mydump01.dmp logfile=dplogs:mydump01.log CONTENT=DATA_ONLY &


<br/><br/>


<strong>Парамтеры ECLUDE и INCLUDE</strong>
<br/><br/>

Параметры EXCLUDE и INCLUDE – это два взаимоисключающих параметра, которые можно применять для выполнения так называемой фильтрации метаданных (metadata filtering). Фильтрация метаданных позволяет выборочно исплючать или наоборот включать определенные типы объектов во время выполнения задания Data Pump Export или Data Pump Import. В преджней утилите экспорта для указания того, требуется ли экспортировать такие объекты, применялись параметры CONSTRAINTS, GRANTS и INDEXES. За счет использования параметров EXCLUDE и INCLUDE теперь стало можно включать и исключать объекты и многих других видов помимо тех четырех, фильтарцию которых можно было осуществлять ранее. Например, если необходимо сделать так, тобы во время экспорта не экспортировались никакие пакеты, такое поведение задается с помощью параметра EXCLUDE.


<br/><br/>

Проще говоря, параметр EXCLUDE помогает пропускать определенные типы объектво базы данных во время операции экспорта или импорта, а параметр INCLUDE наоборот – включать в эти операции только определенный набор объектов. Ниже показано, как в общем случае выглядит синтаксис этих параметров:
<br/>

EXCLUDE=тип_объекта[:конструкция_имени]<br/>
INCLUDE=тип_объекта[:конструкция_имени]<br/>

<br/>
Параметры EXCLUDE и INCLUDE являются взаимоисключащими. Поэтому во время выполенния одного и того же задания применять можно толкьо какой-то один из них; использовать тот и другой одновременно нельзя.

<br/><br/>
Как для параметра EXCLUDE, так и для параметра INCLUDE, элемент конструкция_имени является необязательным. Как известно, некоторые объекты в базе данных, например, таблицы, индексы, пакеты и процедуры, обладают именами, а некоторые, напримре, объекты GRANTS – нет. Элемент конструкция_имени в параметре EXCLUDE или INCLUDE позволяет приенять SQL-функцию для фильтрации именованных объектов.

<br/><br/>
Ниже приведен простой пример исключения всех таблиц, имя которые начинается с ECMP.
<br/><br/>
EXCLUDE=TABLE:”LIKE ‘EMP%’”
<br/><br/>
В этом примере ”LIKE ‘EMP%’” пре конструкцию имени.
<br/><br/>
Элемент конструкция_имени является необязательным в параметрах EXCLUDE и INCLUDE. Он представляет собой просто средство фильтрации, позволяющее более точно определять тип подлежащих исключению или включению объектво (индексов, таблиц и т.д.). В случае его пропуска включаться или исключаться будут все объекты указанного типа.
<br/><br/>
В следующем примере Oracle исключит из операции экспорта все индексы, потому в элементе конструкция_имени не было указано никакого значения, требующего, чтобы исключались только определенные индексы:
<br/><br/>
EXCLUDE=INDEX
<br/><br/>
Вдобавок параметр EXCLUDE может применяться для исключения целой схемы, как показано в следующем примере: 
<br/><br/>
EXCLUDE=SCHEMA:”=’HR’”

<br/><br/>

Параметр INCLUDE является противоположностью параметру EXLCUDE и позволяет принудительно включать в операцию экспорта только определенный набор объектов. Как и в случае параметра EXLCUDE, для указания того, какие точно объекты требуется экспортировать, вместе с INCLUDE тоже можно использовать элемент конструкция_имени.
<br/><br/>
Ниже приведены три примера, демонстрирующие примеение элемента конструкция_имени для ограничения выбираемых объектов:
<br/><br/>
INCLUDE=TABLE:”IN (‘EMPLOYEES’,’DEPARTMENTS’)”;<br/>
INCLUDE=PROCEDURE<br/>
INCLUDE=INDEX:”LIKE ‘EMP%’”<br/>

<br/><br/>
В первом примере параметр INCLUDE указывает, что в процессе экспорта должны приниать участие только две таблицы: ECMPLOYEES и DEPARTMENTS, во втором – только процедуры, а в третьем – только индексы, причем лишь те, имя у которых начинается с EMP.
<br/><br/>
В следующем примере показано, как использовать символ косой черты для отмены двойных кавычек:
<br/><br/>
$ expdp scott/tiger DUMPFIEL=dum.file%U.dmp
schemas=SCOT EXCLUDE=TABLE:\”=’EMP’\”, EXLUDE=FUNCTION:\”=’MY_FUNCTION’\”

<br/><br/>
При выполнении фильтрации метаданных за счет применения параметра EXCLUDE и INCLUDE нужно помнить о том, что все объекты, которые зависят от какого-то из фильтуемых объектов, будут обрабатываться тем же образом, что и сам этот фильтруемый объект. Например, в случае использвоания параметра EXCLUDE  для исключения некоторой таблицы также автоматичеки будут исключаться индексы, граничения, триггеры и прочие зависящие от этой тблицы объеекты.

<br/><br/>
Существует еще множество всевозможных параметров в т.ч. и шиврование, компрессиия и д.р.
<br/><br/>

<h2>Data Pump Import</h2>

$ nohup impdp scott/tiger dumpfile=datapumps:mydump01.dmp logfile=datapumps:mydump01.log &

<br/><br/>
Иногда, (в моем случае при неудачном импорте) можно вытащить из файла дампа весь код DDL. 
Для этого можно воспользоваться параметром SQLFILE.

<br/><br/>
$ nohup impdp scott/tiger dumpfile=datapumps:mydump01.dmp logfile=datapumps:mydump01.log sqlfile=datapumps:scott.sql job_name=scott_import_job_01 &
<br/><br/>
Создается файл scott.sql с DDL.

<br/><br/>


<h3>Параметры фильтрации</h3>

<br/><br/>

Параметр CONTENT применяться в Data Pump Import, как и в Data Pump Export, для указания того, должны ли загружаться только строки (CONTENT=DATA_ONLY), строки и метаданные (CONTENT=ALL), либо только метаданные (CONTENT=METADATA_ONLY).
Параметры EXLCUDE и INCLUDE имеют в Data Pump Import точно такое же предназначение, как и в Data Pump Export, и явялются взаимоисключающими, а в частности:

<br/><br/>
<ul>
<li>Параметр INCLUDE используется для перечиления объектов, которые необходимо импортировать;</li>
<li>Параметр EXCLUDE применятьтся для перечисления объектов, которые имортировать не требуется.</li>
</ul>
<br/><br/>

Ниже приведент простой пример использования параметра INCLUDE. В этом примере импорт ограничивается только объектами таблиц. В результате импортирована будет только таблица PERSONS.
<br/><br/>
INCLUDE=TABLE:”= ‘persons’ “
<br/><br/>
Для импорта только тех таблиц, имя у которых начинается с букв PER, можно использоть конструкцию INCLUDE=TABLE:”LIKE ‘PER%’”.  Вдобавок параметр INCLUDE можно применять и отрицательным образом, указывая то, что все объекты  с оперделенным синтаксисом должны игнорироваться:
INCLUDE=TABLE:”NOT LIKE ‘PER%’”
<br/><br/>
Обратите внимаение на то, что в случае установки для параметра CONTENT занчения DATA_ONLY, использовать во время импорта ни параметр EXCLUDE ни параметр INCLUDE нельзя.
<br/><br/>
Параметр TABLE_EXISTS_ACTION позволяет указывать Data Pump Import, что следует делать в случае, если таблица уже существует. Для этого параметра можно устанавливать четыре разных значения:
<br/><br/>



<ul>
<li>SKIP – (значение по умолчанию) – пропукать таблицу, если таковая уже существует;</li>
<li>APPEND – присоединять строки к таблице;</li>
<li>TRUNCATE – усекать таблицу и загружать данные из экспортного файла дампа.</li>
<li>REPLACE – удалять таблицу, если таковая сущствует, создавать ее заново и снова загружать в нее данные.</li>
</ul>


<br/><br/>

<h3>Параметры переопределения</h3>

<br/><br/>

<h3>Параметр REMAP_TABLE</h3>

<br/><br/>
Параметр REMAP_TABLE  позволяет переименовывать таблицу при выполнении операции импорта с сипользованием метода переноса табличных пространств. 
<br/>
TABLES=hr. employees REMAP_TABLE=hr. employees:emp
<br/>
В этом примере параметр REMAP_TABLE указывает, что при выполненении операции импорта имя таблицы hr.employees должно быть изменено на hr.emp

<br/><br/>


<h3>Параметр REMAP_SCHEMA</h3>
<br/><br/>

Параметр REMAP_SCHEMA позволяет перемещать объекты из одной схемы в другую. Задается этот параметр примерно так:
<br/><br/>
REMAP_SCHEMA=hr:oe
<br/><br/>
В этом примере параметр REMAP_SCHEMA указывает, что при выполнении операции импорта требуется перемесить все объекты из исходной схемы HR в целевую схему OE. Утилита Data Pump Import может даже создать схему OE, если таковой в целевой базе данных не существует.

<br/><br/>

<h3>Параметр REMAP_TABLESPACE</h3>
<br/><br/>
Иногда бывает нужно, чтобы табличное пространство, в которое выполняется импорт даннных, отличалось от используемого в исходной базе данных. Параметр REMAP_TABLESPACE позволяет осуществлять во время импорта перемещение объектов из одного табличноо пространства в другое.
<br/><br/>
REMAP_TABLESPACE=’example_tbs’: ‘new_tbs’

<br/><br/>


<h3>Параметр REMAP_DATAFILE</h3>
<br/><br/>
При перемещении баз данных между двумя различными платформами, на каждой из которых используетс свое соглашие по именованию фалов,  параметр REMAP_DATAFIE приходится очень кстати, поскольку позволяет изменять формат именования файлов. Ниже приведен пример, показывающий, как с помощью этого параметра указать утилите Data Pump Import, что вместо формата фаловой системы Windows, требуется использовать формат файловой системы UNIX. После этого при обнаружении в экспортном файле дампа людой ссылки на файл с именем в формате файловой истемы Windows, утилита Data Pump Import будет автоматически изменять имя файла в соответствии с форматом файловой системы UNIX.

<br/><br/>

REMAP_DATAFIELE=’DB1$:[HRDATA.PAYROLL]tbs6.f’:’/db1/drdata/payroll/tbs6.f’

<br/><br/>
<h3>Параметры TRANSFORM</h3>

<br/><br/>

Предположим, что требуется импортировать таблицу из другой схемиы или даже другой азы данных и не импортироват при этом другие атрибуты хранения объектов, т.е. необходимо просто перенести содержациеся в таблице данные. Параметр TRASNSFORM позволяет указать утилите Data Pump Import не импортировать  оперделенные атрибуты хранения и атрибуты других видов. За счет применения параметра TRANSFORM можно исключать из таблицы или индекса конструкции STORAGE и TABLESPACE или только конструкции STORAGE.
При выполнении импорта с помощью Data Pump Oracle создает объекты с использованием DDL-операторов, которые находит в экспортных файлах дампа. Параметр TRANSFORM, по сути, указывает утилите Data Pump Import изменять приводящие к созданию объектов операторы DDL оперделенным образом.
<br/><br/>
В целом синтаксис параметра TRANSFORM выглядит так:
<br/><br/>
Ниже приведено краткое описание того, что собой представляет кадый элемент.
<br/><br/>
<strong>1) Название_трансовармации.</strong> Существуют всего четыре опции, которые могут указываться на месте этого элемента. Эти опции позволяют, соответственно, изменять четыре основных вида характеристик объекта.
<br/><br/>
<ul>
	<li>SEGMENT ATTRIBUTES.  Эта опция позволяет влиять на атриуты сегмента, в число которых вхдят физические атрибуты, атрибуты хранения, табличные пространства и журанлы. Принуждать Data Pump Import  включать все эти атрибтуы можно, указав на месте название_трансформации этой опции со значением Y (SEGMENT_ATTRIBUTES=Y), которое является для этого параметра значением по умолчанию. В таком случае Data Pump Import будет включать все четыре атрибута сегмента вместе с их операторами DDL.</li>
	<li>STORAGE.  За счет указания на месте название_трансформации опции STORAGE со значением Y (STORAGE=Y), представляющее собой значение по умолчанию, можно получать лишь атрибуты хранения тех объектов,  которые являются частью задания Data Pump Import.</li>
	<li>OID.  В случае указания на месте название_трансформации опции OID со значением Y (OID=Y), которое является для нее значением по умолчанию, объектым таблицам во время импорта будет приваиваться новй OID.</li>
	<li>PCTSPACE. За счет указания на месте название_трансформации опции PCTSPACE  с положительным числом в качестве значения можно увеличивать выделяемый  под объекты и файлы данных объем пространства на соответствующее количество процентов.</li>
</ul>

<br/><br/>
<strong>2) Значение.</strong>  На месте элемента значение в параметре TRANSFORM может указываться либо значение Y (да), либо значение N (нет). Как упоминалось выше, для первых трех опций, которые могут указываться на месте название_трансформации, по умолчанию устанавливается занчение Y.  Это означает, что по умолчанию Data Pump предусмативает выполнение импорта как атрибутов сегмента, так и атрибутов хранения объекта. В качестве альтернативного варианта, для этих опций можно устанавивать значение N и тем самым указывать Data Pump не импортировать исходные атрибуты сегмента и/или  хранения. Что касается опции PCTSPACE, то для нее на месте элемета занчение можнет задваться только какое-то число.

<br/><br/>

<strong>3) Тип_объекта.</strong> На месте элемета тип_объекта можно указывать  утилите Data Pump Import, объекты какого типа необходимо трансформировать. Это могут быть таблицы, индексы, табличные пространсва, типы, кластеры, граничения и прочие обхекты, в зависимости от опций, указываемых на месте название_транформации. В случае не указания типа подлежащих транформаци обхектов при использовании опции SEGMENT_ATTRIBUTES и STORAGE, эти опции будут применяться ко всем таблицам и индексам, которые являются частью операции импорта.


<br/><br/>
Ниже приведен пример применения параметра TRANSFORM:
<br/><br/>


TRANSFORM=SEGMENT_ATTIBUTES:N:table<br/><br/>


В этом примере для SEGMENT_ATTRIBUTES установлено занчение N, а в качестве типа объекта указана таблица. В такой спецификации параметр TRANSFROM указывает утилите Data Pump Import не импортировать существующие атрибуты хранения ни для каких таблиц.



<br/><br/><br/><br/>




<h2>Мониторинг выполнения заданий Data Pump</h2>

Наиболее важными для мониторинга за выполнением заданий Data Pump являются
представления DBA_DATAPUMP_JOBS и  DBA_DATAPUMP_SISSIONS.

<br/><br/>

Представление DBA_DATAPUMP_JOBS позволяет получать сводную информацию обо всех выполняющихся в текущий момент заданиях Data Pump.


<pre>

SQL> set pagesize 0;
SQL> set linesize 220;
SQL> col owner_name format a20;
SQL> col job_name format a20;
SQL> col operation format a20;
SQL> col state format a20;

SQL> SELECT owner_name, job_name, operation, state 
FROM dba_datapump_jobs
WHERE state = 'EXECUTING';


SYS                  IMP_M2M_SVT          IMPORT               EXECUTING

</pre>


<br/><br/>

Представление DBA_DATAPUMP_SESSIONS позволяет выяснять, какие пользователькие сеансы в текущий момент подключены
к заданию Data Pump Export или Data Pump Import

<br/><br/>

SQL> SELECT sid, serial#<br/>
FROM v$session s, dba_datapump_sessions d<br/>
WHERE s.saddr = d.saddr;<br/>

<br/><br/>

<h2>Просмотр информации о ходе выполненния заданий Data Pump</h2>

<br/>

Ниже приведен типичный сценарий, который можнро использовать для получения информаци 
о том, сколько времени осталось до завершения выполенения задания Data Pump:

<br/><br/>

SQL> SELECT opname, target_desc, sofar, totalwork, start_time, time_remaining<br/>
FROM v$session_longops;

<br/><br/>

<ul>
	<li>OPNAME - имя задания Data Pump</li>
	<li>TOTALWORK - показывает, сколько всего мегабайт было насчитано для выполненения данного задания;</li>
	<li>SOFA - показывает, сколько пока было передано мегабайт во время выполенения данного задания;</li>
</ul>



</div>		
		
	

<?php include_once "_footer.php"?>

</body>

</html>
